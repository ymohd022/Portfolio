name: CI/CD for Portfolio

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build & Push Frontend
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/portfolio-frontend:latest ./Portfolio-Mohd_Yousuf
        docker push ${{ secrets.DOCKER_USERNAME }}/portfolio-frontend:latest

    - name: Build & Push Backend
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/portfolio-backend:latest ./Backend
        docker push ${{ secrets.DOCKER_USERNAME }}/portfolio-backend:latest

    - name: Deploy to EC2 Minikube
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          rm -rf Portfolio || true
          git clone https://github.com/ymohd022/Portfolio.git
          cd Portfolio/k8s
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f frontend-service.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f backend-service.yaml
          
    - name: Send success notification
      if: success()
      run: |
        # Install dependencies
        sudo apt-get update
        sudo apt-get install -y curl jq
    
        # Prepare data
        DATA=$(jq -n \
          --arg repo "${{ github.repository }}" \
          --arg workflow "${{ github.workflow }}" \
          --arg commit "${{ github.sha }}" \
          --arg run_id "${{ github.run_id }}" \
          --arg branch "${{ github.ref_name }}" \
          --arg timestamp "${{ github.event.head_commit.timestamp }}" \
          '{
           repo: $repo,
           workflow: $workflow,
           commit: $commit,
           run_id: $run_id,
           branch: $branch,
           timestamp: $timestamp
         }')
    
         # Send request
         response=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.NOTIFY_SECRET }}" \
            -d "$DATA" \
            "${{ secrets.LAMBDA_ENDPOINT }}")
    
        echo "Response status: $response"
        if [ "$response" != "200" ]; then
          echo "::warning::Notification failed with status $response"
        fi

