name: CI/CD for Portfolio

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build & Push Frontend
      id: build-frontend
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/portfolio-frontend:latest ./Portfolio-Mohd_Yousuf
        docker push ${{ secrets.DOCKER_USERNAME }}/portfolio-frontend:latest
        echo "Frontend build completed successfully"

    - name: Build & Push Backend
      id: build-backend
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/portfolio-backend:latest ./Backend
        docker push ${{ secrets.DOCKER_USERNAME }}/portfolio-backend:latest
        echo "Backend build completed successfully"

    - name: Deploy to EC2 Minikube and Setup Monitoring
      id: deploy-all
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          set -e
          rm -rf Portfolio || true
          git clone https://github.com/ymohd022/Portfolio.git
          cd Portfolio/k8s
          
          # Deploy portfolio applications
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f frontend-service.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f backend-service.yaml
          echo "Portfolio applications deployed successfully"
          
          # Deploy Prometheus monitoring
          echo "🚀 Setting up Prometheus monitoring..."
          kubectl apply -f prometheus-deployment.yaml
          kubectl apply -f prometheus-configmap.yaml
          kubectl apply -f prometheus-service.yaml
          
          # Wait for Prometheus to be ready
          echo "⏳ Waiting for Prometheus to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n monitoring || true
          
          # Deploy Skooner for monitoring
          echo "🚀 Setting up Skooner monitoring..."
          kubectl apply -f skooner-deployment.yaml
          kubectl apply -f skooner-configmap.yaml
          kubectl apply -f skooner-service.yaml
          
          # Wait for Skooner to be ready
          echo "⏳ Waiting for Skooner to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/skooner -n skooner || true
          
          # Get service information
          PROMETHEUS_NODEPORT=$(kubectl get svc prometheus-service -n monitoring -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "30000")
          SKOONER_NODEPORT=$(kubectl get svc skooner-service -n skooner -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "30123")
          PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4 || echo "localhost")
          
          # Generate access tokens
          SKOONER_TOKEN=$(kubectl create token skooner-sa -n skooner --duration=8760h 2>/dev/null || echo "Token generation failed")
          
          echo "🎉 Deployment completed with monitoring!"
          echo "📊 Prometheus: http://${PUBLIC_IP}:${PROMETHEUS_NODEPORT}"
          echo "📊 Skooner Dashboard: http://${PUBLIC_IP}:${SKOONER_NODEPORT}"
          echo "🔐 Skooner Access Token: ${SKOONER_TOKEN}"
          
          # Display all services
          echo "📋 All deployed services:"
          kubectl get svc --all-namespaces
          
          # Setup Grafana with pre-built dashboards
          PROMETHEUS_URL="http://${PUBLIC_IP}:${PROMETHEUS_NODEPORT}"
          GRAFANA_URL="https://mohdyousuf9059.grafana.net"
          GRAFANA_API_KEY="${{ secrets.GRAFANA_API_KEY }}"
          
          echo "🚀 Setting up Grafana with pre-built dashboards..."
          
          # 1. Create Prometheus data source with proper configuration
          cat > datasource.json << DSEOF
          {
            "name": "Portfolio-Prometheus",
            "type": "prometheus",
            "url": "${PROMETHEUS_URL}",
            "access": "proxy",
            "isDefault": true,
            "basicAuth": false,
            "jsonData": {
              "httpMethod": "POST",
              "manageAlerts": true,
              "prometheusType": "Prometheus",
              "prometheusVersion": "2.45.0",
              "cacheLevel": "High",
              "disableMetricsLookup": false,
              "incrementalQuerying": false,
              "exemplarTraceIdDestinations": [],
              "scrapeInterval": "15s",
              "queryTimeout": "60s",
              "timeInterval": "15s"
            }
          }
          DSEOF
          
          # Delete existing data source if it exists
          curl -s -X DELETE \
            -H "Authorization: Bearer ${GRAFANA_API_KEY}" \
            "${GRAFANA_URL}/api/datasources/name/Portfolio-Prometheus" || true
          
          # Create new data source
          DS_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${GRAFANA_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @datasource.json \
            "${GRAFANA_URL}/api/datasources")
          
          echo "📊 Data source response: ${DS_RESPONSE}"
          
          # Get data source UID
          EXISTING_DS=$(curl -s -X GET \
            -H "Authorization: Bearer ${GRAFANA_API_KEY}" \
            "${GRAFANA_URL}/api/datasources")
          
          DATASOURCE_UID=$(echo "${EXISTING_DS}" | grep -A5 -B5 "Portfolio-Prometheus" | grep '"uid"' | head -1 | cut -d'"' -f4)
          
          if [ -z "${DATASOURCE_UID}" ]; then
            DATASOURCE_UID="portfolio-prometheus-uid"
          fi
          
          echo "📈 Using data source UID: ${DATASOURCE_UID}"
          
          # 2. Create comprehensive Kubernetes monitoring dashboard
          cat > k8s_dashboard.json << K8SDASHEOF
          {
            "dashboard": {
              "id": null,
              "title": "Kubernetes Cluster Monitoring",
              "tags": ["kubernetes", "cluster", "prometheus"],
              "timezone": "browser",
              "panels": [
                {
                  "id": 1,
                  "title": "Cluster Status",
                  "type": "stat",
                  "targets": [
                    {
                      "expr": "up",
                      "refId": "A",
                      "datasource": {"type": "prometheus", "uid": "${DATASOURCE_UID}"},
                      "legendFormat": "{{job}} - {{instance}}"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0},
                  "fieldConfig": {
                    "defaults": {
                      "color": {"mode": "thresholds"},
                      "thresholds": {
                        "steps": [
                          {"color": "red", "value": null},
                          {"color": "green", "value": 1}
                        ]
                      },
                      "unit": "short"
                    }
                  }
                },
                {
                  "id": 2,
                  "title": "Prometheus Targets",
                  "type": "stat",
                  "targets": [
                    {
                      "expr": "count(up)",
                      "refId": "A",
                      "datasource": {"type": "prometheus", "uid": "${DATASOURCE_UID}"}
                    }
                  ],
                  "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
                },
                {
                  "id": 3,
                  "title": "HTTP Request Rate",
                  "type": "timeseries",
                  "targets": [
                    {
                      "expr": "rate(prometheus_http_requests_total[5m])",
                      "refId": "A",
                      "datasource": {"type": "prometheus", "uid": "${DATASOURCE_UID}"},
                      "legendFormat": "{{handler}} - {{code}}"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
                },
                {
                  "id": 4,
                  "title": "Memory Usage",
                  "type": "timeseries",
                  "targets": [
                    {
                      "expr": "prometheus_tsdb_head_memory_usage_bytes / 1024 / 1024",
                      "refId": "A",
                      "datasource": {"type": "prometheus", "uid": "${DATASOURCE_UID}"},
                      "legendFormat": "Memory Usage (MB)"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
                },
                {
                  "id": 5,
                  "title": "Disk Usage",
                  "type": "timeseries",
                  "targets": [
                    {
                      "expr": "prometheus_tsdb_head_samples_appended_total",
                      "refId": "A",
                      "datasource": {"type": "prometheus", "uid": "${DATASOURCE_UID}"},
                      "legendFormat": "Samples Appended"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
                },
                {
                  "id": 6,
                  "title": "All Targets Status",
                  "type": "table",
                  "targets": [
                    {
                      "expr": "up",
                      "refId": "A",
                      "datasource": {"type": "prometheus", "uid": "${DATASOURCE_UID}"},
                      "format": "table",
                      "instant": true
                    }
                  ],
                  "gridPos": {"h": 8, "w": 24, "x": 0, "y": 16},
                  "fieldConfig": {
                    "defaults": {
                      "custom": {
                        "displayMode": "auto",
                        "inspect": false
                      }
                    }
                  }
                }
              ],
              "time": {"from": "now-1h", "to": "now"},
              "refresh": "30s",
              "schemaVersion": 39,
              "version": 1
            },
            "overwrite": true
          }
          K8SDASHEOF
          
          # 3. Create Application Performance dashboard
          cat > app_dashboard.json << APPDASHEOF
          {
            "dashboard": {
              "id": null,
              "title": "Portfolio Application Performance",
              "tags": ["portfolio", "application", "performance"],
              "timezone": "browser",
              "panels": [
                {
                  "id": 1,
                  "title": "Application Uptime",
                  "type": "stat",
                  "targets": [
                    {
                      "expr": "up{job=~\".*service.*\"}",
                      "refId": "A",
                      "datasource": {"type": "prometheus", "uid": "${DATASOURCE_UID}"},
                      "legendFormat": "{{job}}"
                    }
                  ],
                  "gridPos": {"h": 6, "w": 8, "x": 0, "y": 0},
                  "fieldConfig": {
                    "defaults": {
                      "color": {"mode": "thresholds"},
                      "thresholds": {
                        "steps": [
                          {"color": "red", "value": null},
                          {"color": "green", "value": 1}
                        ]
                      }
                    }
                  }
                },
                {
                  "id": 2,
                  "title": "Prometheus Query Duration",
                  "type": "timeseries",
                  "targets": [
                    {
                      "expr": "prometheus_engine_query_duration_seconds",
                      "refId": "A",
                      "datasource": {"type": "prometheus", "uid": "${DATASOURCE_UID}"},
                      "legendFormat": "{{quantile}}"
                    }
                  ],
                  "gridPos": {"h": 6, "w": 16, "x": 8, "y": 0}
                },
                {
                  "id": 3,
                  "title": "TSDB Head Series",
                  "type": "timeseries",
                  "targets": [
                    {
                      "expr": "prometheus_tsdb_head_series",
                      "refId": "A",
                      "datasource": {"type": "prometheus", "uid": "${DATASOURCE_UID}"},
                      "legendFormat": "Head Series"
                    }
                  ],
                  "gridPos": {"h": 8, "w": 12, "x": 0, "y": 6}
                },
                {
                  "id": 4,
                  "title": "Config Reload Success",
                  "type": "stat",
                  "targets": [
                    {
                      "expr": "prometheus_config_last_reload_successful",
                      "refId": "A",
                      "datasource": {"type": "prometheus", "uid": "${DATASOURCE_UID}"}
                    }
                  ],
                  "gridPos": {"h": 8, "w": 12, "x": 12, "y": 6}
                }
              ],
              "time": {"from": "now-1h", "to": "now"},
              "refresh": "30s",
              "schemaVersion": 39,
              "version": 1
            },
            "overwrite": true
          }
          APPDASHEOF
          
          # Create dashboards
          echo "📊 Creating Kubernetes dashboard..."
          K8S_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${GRAFANA_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @k8s_dashboard.json \
            "${GRAFANA_URL}/api/dashboards/db")
          
          echo "📊 Creating Application dashboard..."
          APP_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${GRAFANA_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @app_dashboard.json \
            "${GRAFANA_URL}/api/dashboards/db")
          
          echo "K8s Dashboard: ${K8S_RESPONSE}"
          echo "App Dashboard: ${APP_RESPONSE}"
          
          # Extract dashboard URLs
          K8S_URL=$(echo "${K8S_RESPONSE}" | grep -o '"url":"[^"]*"' | cut -d'"' -f4 | head -1)
          APP_URL=$(echo "${APP_RESPONSE}" | grep -o '"url":"[^"]*"' | cut -d'"' -f4 | head -1)
          
          echo "✅ Dashboards created successfully!"
          echo "🔗 Kubernetes Dashboard: ${GRAFANA_URL}${K8S_URL}"
          echo "🔗 Application Dashboard: ${GRAFANA_URL}${APP_URL}"
          
          # Test Prometheus connection
          echo "🧪 Testing Prometheus connection..."
          PROM_TEST=$(curl -s "${PROMETHEUS_URL}/api/v1/targets" | head -200)
          echo "Prometheus targets: ${PROM_TEST}"
          
          # Configure AWS and send detailed notification
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"
          
          # Create detailed success notification payload
          cat > success_payload.json << SUCCESSEOF
          {
            "repository": "${{ github.repository }}",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "build_status": "success",
            "workflow_run_id": "${{ github.run_id }}",
            "actor": "${{ github.actor }}",
            "prometheus_url": "${PROMETHEUS_URL}",
            "skooner_url": "http://${PUBLIC_IP}:${SKOONER_NODEPORT}",
            "skooner_token": "${SKOONER_TOKEN}",
            "public_ip": "${PUBLIC_IP}",
            "grafana_url": "${GRAFANA_URL}",
            "k8s_dashboard": "${GRAFANA_URL}${K8S_URL}",
            "app_dashboard": "${GRAFANA_URL}${APP_URL}",
            "message": "Portfolio deployed successfully with monitoring dashboards!"
          }
          SUCCESSEOF
          
          # Send success notification
          echo "📧 Sending success notification..."
          aws lambda invoke \
            --function-name portfolio-notification-lambda \
            --payload file://success_payload.json \
            --cli-binary-format raw-in-base64-out \
            success_response.json || echo "Lambda notification failed - check Lambda function"
          
          echo "✅ Success notification sent"
          [ -f success_response.json ] && cat success_response.json
          
          # Cleanup temporary files
          rm -f datasource.json k8s_dashboard.json app_dashboard.json success_payload.json success_response.json

    # Configure AWS credentials (fallback)
    - name: Configure AWS credentials
      if: failure()
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Send failure notification via Lambda (if any step fails)
    - name: Send Failure Notification
      if: failure()
      run: |
        # Create payload file
        cat > failure_payload.json << EOF
        {
          "repository": "${{ github.repository }}",
          "commit_sha": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "build_status": "failure",
          "workflow_run_id": "${{ github.run_id }}",
          "actor": "${{ github.actor }}",
          "message": "Portfolio deployment failed! Check GitHub Actions logs."
        }
        EOF
        
        # Send failure notification
        aws lambda invoke \
          --function-name portfolio-notification-lambda \
          --payload file://failure_payload.json \
          --cli-binary-format raw-in-base64-out \
          failure_response.json || echo "Lambda notification failed"
        
        echo "Failure notification sent"
        [ -f failure_response.json ] && cat failure_response.json